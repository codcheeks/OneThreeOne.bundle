import re
import os
import sys

try:
	path = os.getcwd().split("?\\")[1].split('Plug-in Support')[0]+"Plug-ins\OneThreeOne.bundle\Contents\Services\URL\OneThreeOne\Modules"
except:
	path = os.getcwd().split("Plug-in Support")[0]+"Plug-ins/OneThreeOne.bundle/Contents/Services/URL/OneThreeOne/Modules"
if path not in sys.path:
	sys.path.append(path)

import jsbeautifier


########################################################################################
def NormalizeURL(url):

	return url

########################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)

	try:
		title = page.xpath("//div[@class='most-recent']/h2[3]/text()")[0]
	except:
		title = ""
	try:
		description = page.xpath("//p[@class='description']/text()")[0]
	except:
		description = ""
	thumb = url

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)

########################################################################################
def MediaObjectsForURL(url):

	return [
        	MediaObject(
			parts = [
				PartObject(
					key = 
						Callback(
							PlayVideo,
							url = url,
							fmt = 'hi',
							post_url = url
						)
					)
				],
			video_resolution = 720,
			bitrate = 1500,
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True if Client.Product != 'Plex Web' else False
			)
	]

########################################################################################
@indirect
def PlayVideo(url, fmt):
	html = HTTP.Request(url).content
	html = HTML.ElementFromURL(url)
	for each in html.xpath("//div[@class='tabcontents']/div"):
		try:
			view_url = each.xpath("./iframe/@src")[0]
		except:
			continue
		if "youwatch" in view_url:
			youwatch = HTML.ElementFromURL(view_url)
			beautify = jsbeautifier.beautify(youwatch.xpath("//div[@id='player_code']/script[2]/text()")[0])
			try:
				video_url = Regex('file:\s"([^"]+)"').search(beautify).groups()[0]
				break
			except:
				pass
		elif "exashare" in view_url:
			exashare = HTTP.Request(view_url).content
			try:
				video_url = Regex('file:\s"([^"]+)"').search(exashare).groups()[0]
				break
			except:
				pass
		elif "vshare" in view_url:
			vshare = HTTP.Request(view_url).content
			try:
				video_url = Regex('file:\s"([^"]+)"').search(vshare).groups()[0]
				break
			except:
				pass
		elif "vodlocker" in view_url:
			vodlocker = HTTP.Request(view_url).content
			try:
				video_url = Regex('file: "([^"]+)"').search(vodlocker).groups()[0]
				break
			except:
				pass
		elif "filehoot" in view_url:
			filehoot = HTTP.Request(view_url).content
			try:
				video_url = Regex('file:\s"([^"]+)"').search(filehoot).groups()[0]
				break
			except:
				pass
		elif "allmyvideos" in view_url:
			allmyvideos = HTTP.Request(view_url).content
			try:
				video_url = Regex('\"file\" : \"([^"]+)\"').search(allmyvideos).groups()[0]
				break
			except:
				pass

	return IndirectResponse(VideoClipObject, key=video_url)
